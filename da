

1 Linear search

#include <iostream>  
using namespace std;
int search(int a[],int n,int v) 
{  
  
  for (int i = 0; i < n; i++)  
    {  
        if (a[i] == v)  
        return i;  
    }  
  return -1;  
}  
int main() 
{  
  int a[] = {10,20,30,40,50,60};
   int n = sizeof(a) / sizeof(a[0]);   
 
  cout<<"The elements of the array are - ";  
  for (int i = 0; i < n; i++) 
  {
    	cout<<" "<<a[i];  
  }
  int v;
  cout<<endl<<"Enter element to search : ";cin>>v;
   int s = search(a,n,v); 
  
  
  if (s == -1) 
  cout<<endl<<"Element is not present in array";
  else  
  cout<<endl<<"Element is present at index : "<<s;
}  

Binary search

#include<iostream>
using namespace std;
int main ()  
{  
    
    int a[5]={1,2,3,4,5},lb,mid,ub,i,x;
    lb = 0;  
    ub=4;  
     cout<<"array : "<<endl;
     for(i=0;i<5;i++)
     {
         cout<<" "<<a[i];
     }
   
    cout <<endl<< "value to be searched : " << endl;  
    cin >> x;  
    while(lb<=ub)  
    {  

        mid=(lb+ub)/2;  
        if (a[mid] == x)  
        {  
            cout << " Element is found at index " << (mid);  
            exit (0);  
        }  
          
        else if(x>a[mid])  
        {  
            lb=mid+1; 
        }  
         
        else if (x<a[mid])  
        {  
            ub=mid-1; 
        }  
    }  
    cout << " Number is not found. " << endl;  
    return 0;  
}   



2  Bubble sort:

#include <iostream>
using namespace std;
int main()
{
    int a[6]={1,4,2,3,6,0};
    int n=6;
    int i,j,temp;
    cout<<"Array : "<<endl;
    for(i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(a[j]<a[i])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    }
    cout<<endl<<"Aftre sorting : "<<endl;
    for(i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
}


Selection Sort

#include <iostream>  
  
using namespace std;  
int main()  
{  
    int a[] = {11,2,5,3,7,6};  
    int n = sizeof(a) / sizeof(a[0]);
     int i, j, small;  
      cout<< "Before sorting array elements are - "<<endl;  
      for(i=0;i<n;i++)
      {
          cout<<a[i]<<" ";
      }
    for (i = 0; i < n-1; i++)    // One by one move boundary of unsorted subarray  
    {  
        small = i; //minimum element in unsorted array  
          
        for (j = i+1; j < n; j++)  
        {
            if (a[j] < a[small])  
                small = j;  
    
              
        }
        int temp = a[small];  
        a[small] = a[i];  
        a[i] = temp;
    }  
    
     
    cout<< "\nAfter sorting array elements are - "<<endl; 
     for(i=0;i<n;i++)
      {
          cout<<a[i]<<" ";
      }
   
  
    return 0;  
}  


Quick Sort

#include <iostream>
using namespace std;

int partition(int a[], int start, int end) 
{
    int pivot = a[end], i = start - 1;
    for (int j = start; j < end; j++)
        if (a[j] < pivot)
            swap(a[++i], a[j]);
    swap(a[i + 1], a[end]);
    return i + 1;
}

void quickSort(int a[], int start, int end)
 {
    if (start < end) {
        int p = partition(a, start, end);
        quickSort(a, start, p - 1);
        quickSort(a, p + 1, end);
    }
}

void printArr(int a[], int n) 
{
    for (int i = 0; i < n; i++) cout << a[i] << " ";
}

int main()
 {
    int a[] = {23, 8, 28, 13, 18, 26};
    int n = sizeof(a) / sizeof(a[0]);
    cout << "Before: "; printArr(a, n);
    quickSort(a, 0, n - 1);
    cout << "\nAfter: "; printArr(a, n);
    return 0;
}



3 recursion


#include <iostream>
using namespace std;
//recursive
double factorialr(double n) 
{
    if (n <= 1) return 1;
    return n * factorialr(n - 1);
}
//iterative
double factorialI(double n) 
{
    double result = 1;
    for (int i = 1; i <= n; i++) 
    {
        result *= i;
    }
    return result;
}
int main() 
{
    int n = 5;
    cout << "Factorial of " << n << " using recursion is: " << factorialr(n) << endl;
    cout << "Factorial of " << n << " using iterative is: " << factorialI(n) << endl;
    return 0;
}



6 knapksack 

#include <stdio.h>
 
int max(int a, int b) {
    return (a > b) ? a : b;
}
 
int knapSack(int W, int wt[], int val[], int n) {
    int i, w;
    int K[n + 1][W + 1]; // Create a 2D array for storing the maximum value
 
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                K[i][w] = 0; // Base case: no items or no capacity
            } else if (wt[i - 1] <= w) {
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
            } else {
                K[i][w] = K[i - 1][w];
            }
        }
    }
    
    return K[n][W]; // Return the maximum value
}
 
int main() {
    int i, n, val[20], wt[20], W;
 
    printf("Enter number of items: ");
    scanf("%d", &n);
    
    printf("Enter value and weight of items:\n");
    for (i = 0; i < n; ++i) {
        scanf("%d%d", &val[i], &wt[i]);
    }
    
    printf("Enter size of knapsack: ");
    scanf("%d", &W);
 
    printf("Maximum value in Knapsack = %d\n", knapSack(W, wt, val, n));
    
    return 0;
}

matrix chain mul


#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int mcm(vector<int>& a, int i, int j) 
{
    if (i + 1 == j)
        return 0;
    
    int minCost = INT_MAX;    
    for (int k = i + 1; k < j; k++) 
    {
        int currentCost = mcm(a, i, k)
                        + mcm(a, k, j)
                        + a[i] * a[k] * a[j];
        minCost = min(currentCost, minCost);
    }
    return minCost;
}
int optimalMatrixChainOrder(vector<int>& a) 
{
    int n = a.size();
    return mcm(a, 0, n - 1);
}
int main()
{
    vector<int> a = {3,4,5,6,7};
    cout << "Minimum number of multiplications: " << optimalMatrixChainOrder(a);
    return 0;
}


8) change : 


#include <iostream>
#include<vector>
using namespace std;

int countWays(const vector<int>& coins, int n, int sum) {
    if (sum == 0) return 1;
    if (sum < 0 || n == 0) return 0;
    return countWays(coins, n, sum - coins[n - 1]) + 
            countWays(coins, n - 1, sum);
}

int main() {
    vector<int> coins = {1, 2, 3};
    int sum = 5;
    cout <<"Number of wayes to make coin change :" <<countWays(coins, coins.size(), sum);
    return 0;
}















