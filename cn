









































1) bit : 
Bit Stuffing : 
 #include <stdio.h>
 #include <string.h>

int main() {
    char data[100], stuffedData[200];
    int i, count = 0, j = 0;
    printf("Enter the data: ");
    scanf("%s", data);
    for(i = 0; i < strlen(data); i++) {
        if(data[i] == '1') {
            count++;
            stuffedData[j++] = data[i];
        } else {
            count = 0;
            stuffedData[j++] = data[i];
        }
        if(count == 5) {
            count = 0;
            stuffedData[j++] = '0';
        }
    }
    stuffedData[j] = '\0';
    printf("Data after bit stuffing: %s\n", stuffedData);
    return 0;
}

byte :

 #include <stdio.h>
 #include <string.h>
 void main()
 {
    char frame[50][50], str[50][50];
    char flag[10];
    strcpy(flag, "flag");
    char esc[10];
    strcpy(esc, "esc");
    int i, j, k = 0, n;
    strcpy(frame[k++], "flag");
    printf("Enter length of String : \n");
    scanf("%d", &n);
    printf("Enter the String: ");
    for (i = 0; i <= n; i++){
        gets(str[i]);}
    printf("\nYou entered :\n");
    for (i = 0; i <= n; i++){
        puts(str[i]); }
    printf("\n");
    for (i = 1; i <= n; i++){
        if (strcmp(str[i], flag) != 0 && strcmp(str[i], esc) != 0)    
    {
            strcpy(frame[k++], str[i]);        }
        Else
        {
            strcpy(frame[k++], "esc");
            strcpy(frame[k++], str[i]);   }    }
    strcpy(frame[k++], "flag");
    printf("------------------------------\n\n");
    printf("Byte stuffing at sender side:\n\n");
    printf("------------------------------\n\n");
    for (i = 0; i < k; i++) {
        printf("%s\t", frame[i]); 
}
 }











































6) Parity check  : 

#include<stdio.h>
#include <string.h>
int main(){
int count=0,i,p;
char data[100];
printf("Enter Binary code :");
scanf("%s",data);
for(i=0;i<strlen(data);i++){
if(data[i]=='1'){
count = count + 1; }
}
if(count%2==0){
printf("Parity : Even\n");
printf("Parity bit : 0");
} else{
printf("Parity : Odd\n");
printf("Parity bit : 1");
}
}











































LRC:
#include <iostream>
#include <string.h>
#define MAX 100
#define PARITY 20

using namespace std;

int main() {
		int i,j,seg,flag=0;
		char arr[MAX],lrc[PARITY];
		
		abc:
		cout<<"Enter data bit:";
		cin>>arr;
		
	
		for(i=2;i<strlen(arr);i++){
			if(strlen(arr)%i==0){
				flag=1;
				break;
			}else{
				flag=0;
			}
		}
		if(flag==1){
			seg=strlen(arr)/i;
		}else{
			seg=strlen(arr);
		}
	
		for(i=0;i<strlen(arr);i++){		
			if( i<(strlen(arr)/seg) ){
					lrc[i]=arr[i];
					continue;
				}
			if(lrc[i%(strlen(arr)/seg)]==arr[i]){
					lrc[i%(strlen(arr)/seg)]='0';
				}
			else{
					lrc[i%(strlen(arr)/seg)]='1';
				}			
		}
		
		cout<<"\n\nLRC is :\n\n";
	
		for(i=0;i<strlen(arr);i++){
			cout<<"  "<<arr[i]<<"  ";
			if( (i%(strlen(arr)/seg)) == (strlen(arr)/seg)-1 ){ 
				cout<<endl;	
			}
		}
	
		for(i=0;i<(strlen(arr)/seg);i++){
			cout<<"-----";	
		}
		cout<<endl;
		
		for(i=0;i<(strlen(arr)/seg);i++){
			cout<<"  "<<lrc[i]<<"  ";	
		}
		cout<<endl;
		return 0;
	}










































vrc

#include<iostream>
using namespace std;
#define max 100 
int checkprime(int val)
{
	int count=0;
	for(int i=1;i<=val;i++)
	{
		if(val%i==0)
		{
			count++;
		}
	}
	if(count==2)
	{
		return 0;
	}
	else
	{
		return 1;
	}
	
}

int main()
{
	int len,seg,i=0,jcounter;
	
	cout<<"Enter the count of the elements : ";
	cin>>len;
	int arr[max];
	
	int counter;
	int ans=checkprime(len);
	cout<<"\nEnter "<<len<<" Elements : ";
	for(i=0;i<len;i++)
	{	
		cin>>arr[i];
	}
	if(ans==0)
	{
		int countoddeven=0;
		for(i=0;i<len;i++)
		{		
			if(arr[i]==1)
			{
				countoddeven++;
			}
		}

		if(countoddeven%2==0)
		{
			arr[i]=0;
		}
		else
		{
			arr[i]=1;
		}
		cout<<"\n\n VRC : \n\n";
		for(int j=0;j<=i;j++)
		{
			if(j==i)
			{
				cout<<" | ";
			}
			cout<<arr[j];
		}
	
	}
	else
	{
		for(i=7;i>=2;i--)
		{
			if(len%i==0)
			{
				seg=i;
				counter++;
			}
		}
		
		int arr1[max][max];
		int countforarr=0;
		for(i=0;i<len/seg;i++)
		{
			for(int j=0;j<seg;j++)
			{
				arr1[i][j]=arr[countforarr];
				countforarr++;
				
			}
		
		}
		int innercount=0;
		int j;
		for(i=0;i<len/seg;i++)
		{
			for(j=0;j<seg;j++)
			{
				if(arr1[i][j]==1)
				{
					innercount++;
				}
			}
			if(innercount%2==0)
			{
				arr1[i][j]=0;
			}
			else
			{
				arr1[i][j]=1;
			}
			innercount=0;
		}
		cout<<"\n\n\n";
		cout<<"\n\n VRC : \n\n";
		for(i=0;i<len/seg;i++)
		{
			for(j=0;j<seg+1;j++)
			{
				if(j==seg)
				{
					cout<<" | ";
				}
				cout<<arr1[i][j]<<" ";
				
			}
			cout<<"\n";
		}
		                                                                               
	}

	return 0;
}









































crc : 	

#include<iostream>
#include<math.h>
#define MAX 100
#define d 10
using namespace std;
int main()
{
	int a[MAX],b[d],c[MAX],i,j,k,size,dsize;
	cout<<"\nEnter Message length : ";
	cin>>size;
	cout<<"\nEnter your Message : \n";
	for(i=0;i<size;i++)
	{
		cin>>a[i];
	}
	cout<<"\nEnter Divisor length : ";
	cin>>dsize;
	cout<<"\nEnter Generator : ";
	for(i=0;i<dsize;i++)
		{
			cin>>b[i];	
		}
	int newsize;
	newsize = size+dsize-1;
	for(i=size;i<newsize;i++)
	{
		a[i] = 0;
	}
	cout<<"\nMain Message : \n";
	for(i=0;i<newsize;i++) {
		cout<<" "<<a[i];	
	}
	cout<<"\nDivisor : \n";
	for(i=0;i<dsize;i++) 
	{
		cout<<" "<<b[i];
	}	
	for(i=0;i<newsize;i++)
		{
			c[i] = a[i]; 	
		}
	for(i=0;i<size;i++)
	{
		k=0;
		if(a[i]==0)
		{
			continue;
		}	
		for(j=i;j<i+dsize;j++)
		{
			int temp;
			temp = a[j]^b[k];
			a[j] =  temp;
			k++;
		}
		
	}
	cout<<endl;
	cout<<"\nRemainder : \n";
	for(i=size-1;i<newsize;i++)
	{
		cout<<" "<<a[i];
	}
	cout<<endl;
	int crc[MAX];
	int carry=0;
	for(i=0;i<newsize;i++)
	{
		if(c[i]==1 && a[i]==1 && carry==0)
		{
			crc[i] = 0;
			carry = 1;
		}
		else if(c[i]==1 && a[i]==1 && carry==1)
		{
			crc[i] = 1;
			carry = 1;
		}
		else if(c[i]==0 && a[i]==0 && carry==0)
		{
			crc[i] = 0;
			carry = 0;
		}
		else if(c[i]==0 && a[i]==0 && carry==1)
		{
			crc[i] = 1;
			carry = 0;
		}
		else if(c[i]==1 && a[i]==0 && carry==0)
		{
			crc[i]=1;
			carry = 0;
		}
		else if(c[i]==1 && a[i]==0 && carry==1)
		{
			crc[i] = 0;
			carry = 1;                                                                                                                                                                        
		}
		else if(c[i]==0 && a[i]==1 && carry==0)
		{
			crc[i] = 1;
			carry = 0;}
		else if(c[i]==0 && a[i]==1 && carry==1)
		{
			crc[i] = 0;
			carry = 1;}
		else
		{
			break;
		}	}
	cout<<"\n\nTransmitted Data : ";
	for(i=0;i<newsize;i++)
	{
		cout<<" "<<crc[i];}
	cout<<"\n\nReceiver Side : ";
	for(i=0;i<size;i++)
	{
		k=0;
		if(crc[i]==0)
		{
			continue;
		}
		for(j=i;j<i+dsize;j++)
		{
			int temp;
			temp = crc[j]^b[k];
			crc[j] =  temp;
			k++;	}
	}
	cout<<"\nRemainder : \n";
	for(i=size-1;i<newsize;i++)
	{cout<<" "<<crc[i];}
	return 0;}





















































2d parity

#include <stdio.h>

#define ROWS 4
#define COLS 4

void displayMatrix(int matrix[ROWS+1][COLS+1], int rows, int cols) {
    for (int i = 0; i <= rows; i++) {
        for (int j = 0; j <= cols; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int data[ROWS][COLS];
    int parityMatrix[ROWS + 1][COLS + 1] = {0};

    printf("Enter the data bits (%d x %d matrix):\n", ROWS, COLS);
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            scanf("%d", &data[i][j]);
            parityMatrix[i][j] = data[i][j];
        }
    }

    for (int i = 0; i < ROWS; i++) {
        int rowParity = 0;
        for (int j = 0; j < COLS; j++) {
            rowParity ^= parityMatrix[i][j];
        }
        parityMatrix[i][COLS] = rowParity;
    }

    for (int j = 0; j < COLS; j++) {
        int colParity = 0;
        for (int i = 0; i < ROWS; i++) {
            colParity ^= parityMatrix[i][j];
        }
        parityMatrix[ROWS][j] = colParity;
    }

    int overallParity = 0;
    for (int i = 0; i < ROWS; i++) {
        overallParity ^= parityMatrix[i][COLS];
    }
    parityMatrix[ROWS][COLS] = overallParity;

    printf("\n2D Parity Matrix:\n");
    displayMatrix(parityMatrix, ROWS, COLS);

    return 0;
}








































